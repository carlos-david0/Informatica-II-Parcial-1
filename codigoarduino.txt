short int datac = 2;
short int relojc = 3;
short int latchc = 4;
short int dataf = 5;
short int relojf = 6;
short int latchf = 7;

void setup(){
  Serial.begin(9600);
  pinMode(datac, OUTPUT);
  pinMode(relojc, OUTPUT);
  pinMode(latchc, OUTPUT);
  pinMode(dataf, OUTPUT);
  pinMode(relojf, OUTPUT);
  pinMode(latchf, OUTPUT);
}

void registros(int fila, int columna){
  	shiftOut(dataf, relojf, LSBFIRST, fila);
    shiftOut(datac, relojc, MSBFIRST, columna);
    digitalWrite(latchc, HIGH);
  	digitalWrite(latchf, HIGH);
  	digitalWrite(latchc, LOW);
  	digitalWrite(latchf, LOW);
}

void verificar(int tiempo, int iteraciones){
  for (short int i = 0; i < iteraciones; i++){
  	registros(255,0);
    delay(tiempo * 1000);
    registros(0,0);
    delay(tiempo * 1000);
  }
}

bool** crear_matriz(short filas, short columnas)
{
    bool** matriz= new bool*[filas];
    for(short i=0;i<filas;i++){
        matriz[i]= new bool[columnas]; //para cada filas se inicializan las columnas
        for(short j=0;j<columnas;j++){ //se crea una matriz de 8*8 nula
            matriz[i][j]=0;
        }
    }
    return matriz;
}
void liberar_memoria(bool** apuntador_matriz,short filas,short columnas){
    for(short i=0;i<filas;i++){
        delete[] apuntador_matriz[i];
    }
    delete[] apuntador_matriz;
}
bool** patron_1(short filas, short columnas){
    bool** patron_1=crear_matriz(filas,columnas);
    short lim_superior=columnas/2, lim_inferior=lim_superior-1; //matriz 8*8 serian 4 y 3
    while(lim_superior<columnas){
        for (short i=0;i<filas/2;i++){
            for(short j=0;j<columnas;j++){
                if(j<=lim_superior && j>=lim_inferior){
                    *(*(patron_1+i)+j)=1;
                }
                else{
                    *(*(patron_1+i)+j)=0;
                }
            }
            lim_inferior--;
            lim_superior++;
        }
    }
  for (short i = filas / 2; i < filas; i++)
    {
        for (short j = 0; j < columnas; j++)
        {
            *(*(patron_1 + i) + j) = *(*(patron_1 + filas - 1 - i) + j);
        }
    }
  
for (int i = 0; i < 4; i++) {//patron residual
    patron_1[i][3 - i] = 0;
    patron_1[i][4 + i] = 0;
}
    return patron_1;
}
bool** patron_2(short filas, short columnas)
{
    bool** patron_2=crear_matriz(filas,columnas);
    for(short i=0;i<filas/2;i++){
        for(short j=columnas-1;j>=columnas/2;j--){ //columnas-1 representa el valor m√°ximo que se puede recorrer en las columnas
            *(*(patron_2+i)+i)=1;
            if(j+i==columnas-1)
                *(*(patron_2+i)+j)=1;
        }
    }
  for (short i = filas / 2; i < filas; i++){
        for (short j = 0; j < columnas; j++){
            *(*(patron_2 + i) + j) = *(*(patron_2 + filas - 1 - i) + j);
        }
    }//es imposible eliminar el patron residual
    return patron_2;
}
bool** patron_3(short filas, short columnas)
{
    bool** patron_3=crear_matriz(filas, columnas);
    for(short i=0;i<filas/2;i++){
        for(short j=i/2;j<columnas;j+=3){
            *(*(patron_3+i)+j)=1;
            if(j!=7){
                *(*(patron_3+i)+(j+1))=1;
            }
        }
    }
  for (short i = filas / 2; i < filas; i++) {
        for (short j = 0; j < columnas; j++) {
            *(*(patron_3 + i) + j) = *(*(patron_3 + i - filas / 2) + j);
        }
    }
  patron_3[2][2] = 0;//patron residual
  patron_3[2][5] = 0;
  patron_3[4][0] = 0;
  patron_3[4][3] = 0;
  patron_3[4][6] = 0;
  patron_3[6][2] = 0;
  patron_3[6][5] = 0;
    return patron_3;
}
bool** patron_4(short filas, short columnas)
{
    bool** patron_4=crear_matriz(filas,columnas);
    for(short i=0;i<filas/2;i++){
        for(short j=i;j<i+(columnas/2);j++){
            *(*(patron_4+i)+j)=1;
        }
    }
  	for (short i = filas / 2; i < filas; i++){
        for (short j = 0; j < columnas; j++){
            *(*(patron_4 + i) + j) = *(*(patron_4 + filas - 1 - i) + j);
        }
    }
  for (int i = 0; i < 4; i++) {//patron residual
    patron_4[i][3 + i] = 0;
    patron_4[i + 5][2 - i] = 0;
}
    return patron_4;
}

int notarray_decimal(bool * boolArray) {
    int decimal = 0;
    int Posicion = 7;
    for (int i = 0; i < 8; i++) {
        if (boolArray[i]) {
            decimal += (1 << Posicion);
        }
        Posicion--;
    }
    return 255 - decimal;
  }
void imagen (bool ** patron, int tiempo){
  const unsigned short int iterador[8]={1,2,4,8,16,32,64,128};
  unsigned long inicio = millis();
  while(millis() <= inicio + tiempo * 1000){
    for (short int i = 0; i < 8; i++){
      registros(iterador[i], notarray_decimal(patron[i]));
    }
  }
  registros(0,0);
}

void publik(){
char opcion;
int tiempo;
Serial.print("1. Verificar funcionamiento de LEDs.\n2. Mostrar imagen de prueba. \n3. Mostrar de forma alternada los patrones.\n");
while(!Serial.available()){}
opcion = Serial.read();
Serial.print("Indique el tiempo en segundos \n");
while(!Serial.available()){}
tiempo = Serial.parseInt();
  switch(opcion){
    case '1': {
      int iteraciones;
      Serial.print("Indique cuantas iteraciones\n");
  	  while(!Serial.available()){}
  	  iteraciones = Serial.parseInt();
      verificar(tiempo, iteraciones);
    }
    break;
    case '2': {
      Serial.print("1. O.\n2. X. \n3. cuadrados.\n4. >.\n");
      while(!Serial.available()){}
	  opcion = Serial.read();
      switch(opcion){
        case '1':{
          bool ** i = patron_1(8,8);
          imagen(i, tiempo);
          liberar_memoria(i,8,8);
        }
        break;
        case '2':{
          bool ** i = patron_2(8,8);
          imagen(i, tiempo);
          liberar_memoria(i,8,8);
        }
        break;
        case '3':{
          bool ** i = patron_3(8,8);
          imagen(i , tiempo);
      	  liberar_memoria(i,8,8);
        }
        break;
        case '4':{
          bool ** i = patron_4(8,8);
          imagen(i, tiempo);
          liberar_memoria(i,8,8);
        }
        break;
        default: Serial.print ("eso no es una opcion\n");
      }
    }
    break;
    case '3':{
      while (!Serial.available()){
        bool ** i = patron_1(8,8);
        imagen(i, tiempo);
        liberar_memoria(i,8,8);
        i = patron_2(8,8);
        imagen(i, tiempo);
        liberar_memoria(i,8,8);
        i = patron_3(8,8);
        imagen(i, tiempo);
        liberar_memoria(i,8,8);
        i = patron_4(8,8);
        imagen(i, tiempo);
        liberar_memoria(i,8,8);
      }
    }
  }
}
void loop(){
  publik();
}